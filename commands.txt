Check git version
git --version
----------------------------------------------------------------------------------------------------------------------------------
Settings for git
Name
Email
Default Editor 
Line Ending
----------------------------------------------------------------------------------------------------------------------------------
Git Speicify three levels 
SYSTEM (For All Users)
GLOBAL (All repositories of the current user)
LOCAL (The Current repository)
----------------------------------------------------------------------------------------------------------------------------------
Settings For Global Level
git config --global user.name "Muhammad Hashim"     
### We use double qoutes because we have space between name
git config --global user.email hashiimtahir@gmail.com 
### we don't spcify double qoutes because we don't have spaces
git config --global core.editor "code --wait"
### we specify default editor to vs code
git config --global -e
### see the config settings in vs code
git config --global core.autocrlf true
### core means carriage return and line feed \r \n to avoid conflict we use
----------------------------------------------------------------------------------------------------------------------------------
Getting Help 
git config --help
## getting help from git 
## to move to next page simple use space and q for quit
git config --h
## use this command for short summary
Check git configurations
git config -l
----------------------------------------------------------------------------------------------------------------------------------
Initilize git 
mkdir Mars
cd Mars
git init
----------------------------------------------------------------------------------------------------------------------------------
git add <file names>
git add *.txt
git add .
# add command is use to stage something in staging area 
----------------------------------------------------------------------------------------------------------------------------------
Check track file
git status
----------------------------------------------------------------------------------------------------------------------------------
# add and commit in same line
# only use when you are 100% sure that don't need to review a code
git commit -am "add and commit"
----------------------------------------------------------------------------------------------------------------------------------
#Removing file2 because we don't any more
rm file2.txt
# rm will remove file2.txt file but i will contain in staging area
git status
#if you want to check that file2.txt is still in staging area run below command
git ls-files
# to remove from staging run this command
git add file2.txt
#finally commit changes 
git commit -m "File2 remove"
----------------------------------------------------------------------------------------------------------------------------------
# Remove from both file and staging area
git rm file2.txt
#it will remove from both directory and in staging area
----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------
#Renaming or moving files
mv file1.txt main.js
#it will rename file1.txt to main.js
git add file.txt main.js
#it will remove file1.txt and stage main.js 
----------------------------------------------------------------------------------------------------------------------------------
#Ignoring files
mkdir logs
#Creating a directory name logs
echo Hello > logs/dev.log
#Creating a new file dev.log and writing Hello which is inside of logs/ directory 
git status
# it will show us untracked logs/ directory
echo logs/ > .gitignore 
# to ignore logs/ directory we simple add a new file name .gitignore and write logs/ directory to it
git status
#Now when you check again it will no longer tell you about untracked logs/ directory because it is ignore by .gitignore
git add .gitignore commands.txt
git commit -m "Add gitignore"
----------------------------------------------------------------------------------------------------------------------------------
#When you accidentally Committed something than git will not ignore in gitignore file
mkdir bin
#Creating a bin directory
echo Hello > bin/app.bin
# writing hello to app.bin file inside a bin directory
git add .
#Accidentally add to staged file
git commit -m "Add Bin"
#Accidentally committed 
echo bin/ >> .gitignore
git add .
git commit -m "Include bin / in gitignore"
again now modify app.bin to check git ignore or not
echo Helloworld >> bin/app.bin
git status
# git will say bin/app.bin in modified means git is not ignoring
#why we this because app.bin file was in staging area
git ls-files
#we can easily see in staging area
# we want to remove only in staging area not in working directory
git rm -h
#we want to see help
git rm --cached -r bin/
#this command will remove bin/ directory in staging area not in working area lets verify
git ls-files
----------------------------------------------------------------------------------------------------------------------------------
git status -s 
# we can use git status -s for short status
echo sky >> moon/main.js
# we simple append sky on main.js
echo mountains > moon/file2.js
#simple create a file2.js inside moon directory and write mountains
git status
# in this sommand we can see modified files and untracked files in very detail
git status -s
#But with this command we can see short status
like 
```
 M moon/main.js
?? moon/file.js
```
# M means main.js is modified and we need to add it to update in staging area
# ?? double question mark means we have an untracked  file and we need to add it to place in staging area
git add moon/main.js
git status -s
# now when we snap this file in staging area we can see output like this
```
M  moon/main.js 
?? moon/file.js
```
#M in green color which means we have add and update in staging area 
echo river >> moon/main.js
# now we  again append something on moon/main.js
git status -s
# output look like this
```
MM moon/main.js
?? moon/file.js
```
#first M in green means last modified were already in staging are but Red M means we modifed something which is not in staging area
git add moon/main.js
#So lets add again in staging area to modify changes
git status -s
#Now the output is look like this
```
M  moon/main.js
?? moon/file.js
```
git add  moon/file2.js
#add file to staging area
git status -s
```
A  moon/file.js
M  moon/main.js
```
# A means file.js is added in staging area
# M in green means modified file added in staging arae
----------------------------------------------------------------------------------------------------------------------------------
check all files is staged but not commit means in staging area
git diff --staged
#we can easily compare staging are old file with new file
git diff
# With this command we can compare untracked / unstaging changes
----------------------------------------------------------------------------------------------------------------------------------
Visual Diff Tools
#We use visual diff tools to compare files side by side
#In this example we simply use vs code as diff tools
#To configure we need to instructions as global level for all repositories
git config --global diff.tool vscode
#We simple set globally diff.tool as vscode Note vscode is just a name or tag
git config --global difftool.vscode.cmd "code --wait --diff $LOCAl $REMOTE"
#now we tell git to open vs code editor for comparing files
1. code means default editor as vs code
2. --wait means terminal will wait until we close vs code
3. --diff (is used for comparing files side by side)
4. $LOCAL and $REMOTE (is just a placeholder for comparing old and new copy) 
git config --global -e
#this command is use to open vs code as editor
git difftool 
#This is used to comparing unstaging files or untracked files
git difftool --staged
#This is used for comparing unstaging files
----------------------------------------------------------------------------------------------------------------------------------
Viewing a commit history
git log
# this log is used for comprehensive commit history
git log --oneline
#this is used for shorter history
git log --oneline --reverse
#this is used for shorter history but in reverse order
git reflog
#This is more focused on tracking changes to references within the repository, which can help in recovering lost commits or branches.
----------------------------------------------------------------------------------------------------------------------------------
Viewing a commit Exactly
if we want to exatly see what we have change in a given commit 
git log --oneline
#Use for view commit history
#I want to see exact content of a commit 
#We can use 
git show  <unique identifier or Head~1>
#lets see
git show 6973451
#this will show the commit exact changes using identifier 6973451
git show Head~2
#this will step down to Head of two previous steps
git show af7a9a4:.gitignore
git show 01c9746:bin/app.bin
#Seeing more detail
git ls-tree Head~1
#ls-tree (means list a files and directory as tree for specific Tree Data Structure)
1. Blob for files
2. Tree for directories
#To see all the files and directories in a commit 
git ls-tree Head~1:.gitignore

----------------------------------------------------------------------------------------------------------------------------------

Restore unstaging Files
echo fishes >> moon/main.js
git add moon/main.js
git restore --staged moon/main.js
to store the unstaing area we use above command
----------------------------------------------------------------------------------------------------------------------------------
stage and commit together
git commit -a -m "New Commit"

check commit history and git diff
git log -p

check specific commit history
git show 2333457

remove specific file
git rm file3.txt

rename specific file
git mv file1.txt file.txt

remove last commit 
git revert HEAD

add tag to current commit
git tag v1.1

switch to specific commit
git checkout v1.1 or git checkout 2333457

add tag with some message
git tag -a v1.2 -m "Some Text"

delete tag
git tag -d v1.0

check branch
git branch

create new branch
git branch release1.0

switch to another branch
git checkout release1.0

create new branch and switch as well
git checkout -b release1.1

delete branch 
git checkout master
git branch -d/-D feature2


Merge branch
git checkout master
git merge feature2

transfer one branch data to another branch
git checkout feature2
git rebase feature1

Getting Started with Github
git init 
git commit -m "Committed"
git remote add origin 'remote repo link'
git push origin master

Check git details
git remote -v
git remote show origin

create remote branch
git push --set-upstream origin master or git push -u origin master

push new branch to remote
git push origin feature1

push tag to remote
git push origin tagname

push all tags in same command
git push origin --tags

get data from remote to local
git pull

add .gitignore which ignore some files to that don't 
push to remote
git add .gitignore

Adding SSH to access repo
ssh-keygen -t ed25519 -C "Github"

cd c:
cat id_ed25519

----------------------------------------------------------------------------------------------------------------------------------
# Setting up oh my posh for windows
1. Simply open your windows powershell and run as a administrator and paste this command
```
Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ohmyposh.dev/install.ps1'))
```
2. For updating if need then run this command to powershell
```
Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ohmyposh.dev/install.ps1'))
```
3. open your git bash terminal  and create a new empty bash_profile
```
touch ~/.bash_profile
```
4. Once we created empty bash_profile we will edit in a sec but once let me finish to create a new theme file as json format
5. Simple go to oh my posh theme page
```
https://ohmyposh.dev/docs/themes
```
6. Select your favoirite theme in my case i select iterm2
7.Now i will provide you a github oh my posh theme section json file link simple you need copy and paste
```
https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes
```
8. Select your favourite i will stick to iterm 
9. I attach json file in directory section you can save in safe location like in my case i save in user>>dell>>iterm.omp.json
10. Once again open git bash, and tell to bash to open .bash_profile in vs code you can open in any editor and paste your command 
```
code ~/.bash_profile
```
11. Once open in vs code paste this command
```
eval "$(oh-my-posh init bash --config /c/Users/DELL/iterm2.omp.json)"
```
12. In my case the location is /c/Users/DELL/iterm2.omp.json
----------------------------------------------------------------------------------------------------------------------------------