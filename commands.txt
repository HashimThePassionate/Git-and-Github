Check git version
git --version
----------------------------------------------------------------------------------------------------------------------------------
-------------Getting Started ---------------
What we learn
1. Fundamenatal Concepts
2. Creatings Snapshots
3. Browsing a project history
4. Branching and Merging
5. Collaborating using github
---------------------------------------------------------------------------------------------------
# configuring git
// Name
// Email
// Default Editor 
// Line Ending
Git Speicify three levels 
// SYSTEM (For All Users)
// GLOBAL (All repositories of the current user)
// LOCAL (The Current repository)
Settings For Global Level
git config --global user.name "Muhammad Hashim"     
// We use double qoutes because we have space between name
git config --global user.email hashiimtahir@gmail.com 
// We don't spcify double qoutes because we don't have spaces
git config --global core.editor "code --wait"
// We specify default editor to vs code
git config --global -e
// See the config settings in vs code
git config --global core.autocrlf true
// Core means carriage return and line feed \r \n to avoid conflict we use
----------------------------------------------------------------------------------------------------------------------------------
# Getting Help 
git config --help
// Getting help from git 
// to move to next page simple use space and q for quit
git config --h
// Use this command for short summary
// Check git configurations
git config -l
----------------------------------------------------------------------------------------------------------------------------------
-------------Creating Snapshots ---------------
Learn all the fundamenatls concepts of git
1. Initilizing 
2. staging files
3. Committing Changes
4. Skipping staging area
5. Removing Files
6. Renaming or Removing files
7. Ignoring files
8. Short Status
9. Viewing staged and unstaged changes
10. Visual diff tools
11. Viewing a commit history
12. Viewing a commit Exactly
13. Unstaging Files
14. Discard Local Changes
15. Restoring a file to an earlier version
----------------------------------------------------------------------------------------------------------------------------------
# Initilizing a git
// Initilize git 
mkdir Mars
cd Mars
git init
----------------------------------------------------------------------------------------------------------------------------------
# Staging a files 
echo hello > file1.txt
echo hello > file2.txt
git status 
git add *.txt
git add file1.txt <file names>
git add . 
// Add command is use to stage something in staging area 
Check track file
git status
----------------------------------------------------------------------------------------------------------------------------------
# Committing Changes
git commit -m "Initial Commit"
git commit -m 
// This will open a default editor to add commit message with description
// Add and commit in same line
----------------------------------------------------------------------------------------------------------------------------------
# Skipping the staging area
// Modifying file1.txt
echo python >> file1.txt
// Only use when you are 100% sure that you don't need to review a code
git commit -am "add and commit"
----------------------------------------------------------------------------------------------------------------------------------
# Removing Files
// Removing file2 because we don't any more
rm file2.txt
// "rm" will remove file2.txt file but it still  contain in staging area lets check to prove
git status
// If you want to check that file2.txt is still in staging area run below command
git ls-files
// To remove from staging run this command
git add file2.txt
// Finally commit changes 
git commit -m "File2 remove"
git ls-files
// Check again now file2.txt is no longer in staging as well
// Instead of unix command rm git provide "git rm" to remove from directory as well as staging are
// Remove from directory as well as staging area
git rm file2.txt
// It will remove from both directory and in staging area
----------------------------------------------------------------------------------------------------------------------------------
# Renaming or moving files
// "mv" is a standard unix command
mv file1.txt main.js
git status
// It will rename file1.txt to main.js
git add main.js
// It will remove file1.txt and stage main.js in staging area 
// Now use instead of standard unix command we use "git mv"
git mv main.js file1.txt
// With this command git will rename in directory as well as in staging area we don't need to run this command
// git add file1.txt
----------------------------------------------------------------------------------------------------------------------------------
#Ignoring files
mkdir logs
// Creating a directory name logs
echo Hello > logs/dev.log
// Creating a new file dev.log and writing Hello which is inside of logs/ directory 
git status
// It will show us untracked logs/ directory
echo logs/ > .gitignore 
// To ignore logs/ directory we simple add a new file name .gitignore and write logs/ directory to it
git status
// Now when you check again it will no longer tell you about untracked logs/ directory because it is ignore by .gitignore
git add .gitignore 
// Add to staging area
git commit -m "Add gitignore"
// lets Commit 
// When you accidentally committed something than git will not ignore in gitignore file lets have a look
mkdir bin
// Creating a bin directory
echo Hello > bin/app.bin
// writing hello to app.bin file inside a bin directory
git add .
// Accidentally add to staged file
git commit -m "Add Bin"
// Accidentally committed 
echo bin/ >> .gitignore
// Adding to gitignore after commit
git add .
git commit -m "Include bin / in gitignore"
// Again now modify app.bin to check git ignore or not
echo Helloworld >> bin/app.bin
git status
// git will say bin/app.bin in modified means git is not ignoring
// Why we this because app.bin file was in staging area
git ls-files
// We can easily see in staging area
// We want to remove only in staging area not in working directory
git rm -h
// We want to see help
git rm --cached -r bin/
// This command will remove bin/ directory in staging area not in working area lets verify
git ls-files
----------------------------------------------------------------------------------------------------------------------------------
# Short Status
git status -s 
// We can use git status -s for short status
echo sky >> moon/main.js
// We simple append sky on main.js
echo mountains > moon/file2.js
// Simple create a file2.js inside moon directory and write mountains
git status
// In this sommand we can see modified files and untracked files in very detail
git status -s
// But with this command we can see short status
like 
```
 M moon/main.js
?? moon/file.js
```
//  M means main.js is modified and we need to add it to update in staging area
//  ?? double question mark means we have an untracked  file and we need to add it to place in staging area
git add moon/main.js
git status -s
//  Now when we snap this file in staging area we can see output like this
```
M  moon/main.js 
?? moon/file.js
```
// M in green color which means we have add and update in staging area 
echo river >> moon/main.js
// Now we  again append something on moon/main.js
git status -s
# output look like this
```
MM moon/main.js
?? moon/file.js
```
// First M in green means last modified were already in staging are but Red M means we modifed something which is not in staging area
git add moon/main.js
// So lets add again in staging area to modify changes
git status -s
// Now the output is look like this
```
M  moon/main.js
?? moon/file.js
```
git add  moon/file2.js
// Add file to staging area
git status -s
```
A  moon/file.js
M  moon/main.js
```
// A means file.js is added in staging area
// M in green means modified file added in staging arae
----------------------------------------------------------------------------------------------------------------------------------
# Viewing staged and unstaged changes
// Check all files that is in staged (add <file names>) but not committed  we use "git diff --staged"
git diff --staged
// We can easily compare staging copy old copy  file with new file
// Now with only "git diff' we can compare untracked copy with staging copy
git diff
// With this command we can compare untracked / unstaging changes
----------------------------------------------------------------------------------------------------------------------------------
# Visual Diff Tools
// We use visual diff tools to compare files side by side
// In this example we simply use vs code as diff tools
// To configure we need to instructions as global level for all repositories
git config --global diff.tool vscode
// We simple set globally diff.tool as vscode Note vscode is just a name or tag
git config --global difftool.vscode.cmd "code --wait --diff $LOCAl $REMOTE"
// Now we tell git to open vs code editor for comparing files
1. code (means default editor as vs code)
2. --wait (means terminal will wait until we close vs code)
3. --diff (is used for comparing files side by side)
4. $LOCAL and $REMOTE (is just a placeholder for comparing old and new copy) 
git config --global -e
// This command is use to open vs code as editor
git difftool 
// This is used to comparing unstaging files or untracked files
git difftool --staged
// This is used for comparing unstaging files
----------------------------------------------------------------------------------------------------------------------------------
# Viewing a commit history
git log
// This log is used for comprehensive commit history
git log --oneline
// This is used for shorter history
git log --oneline --reverse
// This is used for shorter history but in reverse order
----------------------------------------------------------------------------------------------------------------------------------
# Viewing a commit Exactly
// If we want to exatly see what we have change in a given commit 
git log --oneline
// Use for view commit history
// I want to see exact content of a commit 
// We can use 
git show  <unique identifier or Head~1>
// Lets see
git show 6973451
// This will show the commit exact changes using identifier 6973451
git show Head~2
// This will step down to Head of two previous steps 
git show af7a9a4:.gitignore
git show 01c9746:bin/app.bin
// Seeing more detail
git ls-tree Head~1
// ls-tree (means list a files and directory as tree for specific Tree Data Structure)
1. Blob for files
2. Tree for directories
// To see all the files and directories in a commit 
git ls-tree Head~1:.gitignore
----------------------------------------------------------------------------------------------------------------------------------
# Unstaging Files
Restore unstaging Files
echo fishes >> moon/main.js
// We just append or modified "moon/main.js"
git add moon/main.js
// We just add this modified changed to staging area
// But we want to undo that changes inn staging area
git restore --staged moon/main.js
// To store the unstaing area we use above command
----------------------------------------------------------------------------------------------------------------------------------
# Discard Local Changes
echo Programming >> moon/main.js
lets we already modify moon/main.js and we want to restore last untracked changes we use
git restore moon/main.js
now lets we create a new file and write something
echo Hello > moon/file3.js
git status -s
look we have untracked file file4.js to remove completely untracked file we use 
git clean -h (for help)
git clean --f file3.js
----------------------------------------------------------------------------------------------------------------------------------
# Restoring a file to an earlier version
git rm moon/file.js
// We romove from directory as well as staging area
git commit -m "Remove file.js"
// Comitted changes
// Now we want to restore 
git restore -h
// For help
git restore --source=HEAD~1 moon/file.js
----------------------------------------------------------------------------------------------------------------------------------
# Creating Snapshots with VScode
----------------------------------------------------------------------------------------------------------------------------------
# Summary of commands 
----------------------------------------------------------------------------------------------------------------------------------
# Exercise of Question 
----------------------------------------------------------------------------------------------------------------------------------
-------------Browsing History ---------------
----------------------------------------------------------------------------------------------------------------------------------
# Browsing History
1. Search for commits (author, date, messages)
2. View a commit
3. Restore your project 
4. Compare commits
5. View the history of file
6. Find a bad commit that introduce a bug 
----------------------------------------------------------------------------------------------------------------------------------
# Getting a repository
// Look at the directory name "03_browsing_history" find venus zip file and extract it we will use this to learn about browsing history
----------------------------------------------------------------------------------------------------------------------------------
# Viewing the history
// Lets learn bit more about "log" command

git log

// With this "git log" command we say see
1. Unique identifier (07a10f93b3f6cde44fc72f0ad8f7cd7719caa9cb)
2. Author Name (Muhammad Hashim)
3. Author email (*****@gmail.com)
4. Date (Mon May 6 00:43:15 2024 +0500)
5. Commit messge (Creating Snapshots with vs code)

git log --oneline 
// With command  "git --oneline" gives us the summary in one line

git log --oneline --stat
if We want to see all the files that have been change in each commit git use "git log --oneline --stat"

git log --stat 
// Now we have full detail about each commit

git log --oneline --patch
//To See the actual change in each commit

git log 3711212  --oneline --patch
// To see the actual change in specific commit
----------------------------------------------------------------------------------------------------------------------------------
# Filtering the history 
git log --oneline -3
// if we want to see the last 3 commit

git log --oneline --author="Muhammad Hashim"
// Lets Filter by author name

git log --after="2024-04-10"
// Lets filter by date

git log --after="yesterday" git log --after="one week ago"
// We can also spicify by relative dates

git log --oneline -S"see"
// See all the commits that have the word "see" inside commit content

git log --oneline -S"see" --patch
// To see the exact change we can use

git log --oneline 1e52e78..01ddb1f
// If you want to see the range of coommit

git log --oneline sections
// See the commits by directory name
git log --oneline sections/creating-snapshots/init.txt
// See the commit by file 
----------------------------------------------------------------------------------------------------------------------------------
# Formatting the log output

// Lets Customize the log
git log --pretty=format:"Hey $an"
// ouput will be Hey Muhammad Hashim "$an" author name

git log --pretty=format:"%an committed %H"
// Muhammad Hashim committed 06735275dd31d9d3e20a608bcf821fc3a93550c5

git log --pretty=format:"Hey %an %h"
// Hey Muhammad Hashim 0673527

git log --pretty=format:"Hey %an %h"
// Hey Muhammad Hashim on Tue Apr 30 12:47:34 2024 +0500

git log --pretty=format:"%Cgreen%an%Creset committed %h on %cd"
// author name will be green

----------------------------------------------------------------------------------------------------------------------------------
# Alias
// lets Create Alias command for this
git log --pretty=format:"%Cgreen%an%Creset committed %h on %cd"
git config --global -e
// Lets add new configurations for  config file

git config --global alias.lg "log --pretty=format:'%Cgreen %an%Creset committed %h - %s'"
----------------------------------------------------------------------------------------------------------------------------------
# Viewing a Commit
git Show HEAD~2
// We are looking for the commit of Head two step down to previous commit

git show HEAD~2 --name-only
git show HEAD~2 --name-status
----------------------------------------------------------------------------------------------------------------------------------
# Viewing the changes across two commits

// Lets see the changes of last two commits
git diff HEAD~2 HEAD
// Previous we use git diff to see the staged and unstaged changes
git diff HEAD~2 HEAD --name-only
git diff HEAD~2 HEAD --name-status
----------------------------------------------------------------------------------------------------------------------------------
# Checking out to a commit

git log --oneline
```
07a10f9 (HEAD -> main, origin/main, origin/HEAD) Section One Summary
25013ac Creating Snapshots with vs code
3711212 Restoring a file to an earlier version
92b324c Remove file.js
51e351a Discarding Local Changes
01ddb1f Unstaging Files
b20af3f Setting oh my posh
e98ccc1 Viewing exact commit content
88b270e Viewing Commit History
1e52e78 Visual Diff Tools
6973451 Vieving staged and unstaged changes
0673527 Short Status
```
// lets checkout to 
git checkout b20af3f

// By default master point to the last commit and Head pointer point to master but when we checkout Head will not point to master now don't commit

git log --oneline
//  some commits will be invisble bcz now head is poiting to "b20af3f"
git log --oneline --all
// To view all commits use "git log --oneline --all"
git checkout master
// finally chechout to master
----------------------------------------------------------------------------------------------------------------------------------
# Finding Bug using Bisect
// With Biset we can quickly find bugs
git biset start
// This will start bisect 
// You must provide good and bad commit
// Tell get that current commit is bad commit which is Head pointing to last commit
git bisect bad
git log --oneline
git bisect good ca49180
git log --oneline --all
git bisect good
git log --oneline --all
git bisect good
git log --oneline --all
git bisect bad
git log --oneline --all
git bisect bad
git bisect reset
----------------------------------------------------------------------------------------------------------------------------------
# Finding Contributors using shortlog
git shortlog
git shortlog -h
// git shortlog -h for help
git shortlog -n
----------------------------------------------------------------------------------------------------------------------------------
# Viewing the history of a file
git log <file name>
git log --oneline <file name>
----------------------------------------------------------------------------------------------------------------------------------
# Restoring a deleting file
// lets remove the file1.js
git rm toc.txt
git commit -m "Remove toc file"
// Commit changes
git log --oneline
git log --oneline toc.txt
// We could not find
git log --oneline -- toc.txt
git checkout a642e12 toc.txt
// Checkout to previous commit and restore that file
git status -s
git commit -m "Restore toc file"
----------------------------------------------------------------------------------------------------------------------------------
# Finding the author of line using blame
git blame audience.txt 
// lets blame that file 
git blame audience.txt 
// blame by email
git blame -e -L 1,2 audience.txt
// filtering with line
----------------------------------------------------------------------------------------------------------------------------------
# Tagging
// Lets tagging to a commit
git tag v1.3 a642e12
// now we can checkout with a tag
git checkout v1.3
// To see all the tags git tag 
git tag
// To create annotated tag that have some properties we use
git tag -a v1.0 -m "Initial Tag for commit" ca49180
git tag -n
// see the tag message
git show v1.0
// we can see detail using tag
git tag -d v1.0
// For deleting we use 
----------------------------------------------------------------------------------------------------------------------------------
# Browsing a history using vs code
----------------------------------------------------------------------------------------------------------------------------------
# Summary
----------------------------------------------------------------------------------------------------------------------------------
# Exercise
----------------------------------------------------------------------------------------------------------------------------------
-------------Browsing History ---------------
What we learn
1. Use branches
2. Compare branches
3. Merge branches
4. Resolve conflicts
5. Undo a faulty Merge
6. Essential tool (stashing, cherry picking)
----------------------------------------------------------------------------------------------------------------------------------
# What are branches
----------------------------------------------------------------------------------------------------------------------------------
# Getting a repository
----------------------------------------------------------------------------------------------------------------------------------

-------------Setting up Oh My Posh in windows ---------------
----------------------------------------------------------------------------------------------------------------------------------
# Setting up oh my posh for windows
1. Simply open your windows powershell and run as a administrator and paste this command
```
Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ohmyposh.dev/install.ps1'))
```
2. For updating if need then run this command to powershell
```
Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ohmyposh.dev/install.ps1'))
```
3. open your git bash terminal  and create a new empty bash_profile
```
touch ~/.bash_profile
```
4. Once we created empty bash_profile we will edit in a sec but once let me finish to create a new theme file as json format
5. Simple go to oh my posh theme page
```
https://ohmyposh.dev/docs/themes
```
6. Select your favoirite theme in my case i select iterm2
7.Now i will provide you a github oh my posh theme section json file link simple you need copy and paste
```
https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes
```
8. Select your favourite i will stick to iterm 
9. I attach json file in directory section you can save in safe location like in my case i save in user>>dell>>iterm.omp.json
10. Once again open git bash, and tell to bash to open .bash_profile in vs code you can open in any editor and paste your command 
```
code ~/.bash_profile
```
11. Once open in vs code paste this command
```
eval "$(oh-my-posh init bash --config /c/Users/DELL/iterm2.omp.json)"
```
12. In my case the location is /c/Users/DELL/iterm2.omp.json
----------------------------------------------------------------------------------------------------------------------------------